#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../lib/modulr'
require 'optparse'

options = {
  :output => STDOUT
}

opts = OptionParser.new do |opts|
  opts.banner = 'Usage: modulrize program.js [options] > output.js'
  
  opts.separator ''
  opts.separator 'Options:'
  
  opts.on('-o', '--output=FILE', 'Write the output to FILE. Defaults to stdout.') do |output|
    options[:output] = File.open(output, 'w')
  end
  
  opts.on('-r', '--root=DIR', 'Set DIR as root directory. Defaults to the directory containing FILE.') do |root|
    options[:root] = root
  end
  
  opts.on('--lazy-eval [MODULES]', Array,
    'Enable lazy evaluation of all JS modules or of those specified by MODULES.',
    'MODULES accepts a comma-separated list of identifiers.') do |modules|
    modules = true unless modules
    options[:lazy_eval] = modules
  end
  
  opts.on('--minify', 'Minify output using YUI Compressor.') do |minify|
    options[:minify] = minify
  end
  
  opts.on('--global-export[=GLOBAL_VAR]', 'If GLOBAL_VAR is specified and only one module is being processed, export it to the GLOBAL_VAR global variable.', 'If GLOBAL_VAR is specified and multiple modules are being processed, export each one of them as a property of GLOBAL_VAR.', 'If GLOBAL_VAR isn\'t specified, export the module to global variables corresponding to their identifier.') do |global|
    options[:global] = global || true
  end
  
  opts.on('--main-module=MAIN_MODULE', 'Set the identifier of the main module (available through `require.main`).') do |main_module|
    options[:main_module] = main_module
  end
  
  opts.on('--sync', 'Load all dependencies synchronously.') do |sync|
    options[:sync] = true
  end
  
  opts.on('--custom-loader', 'Do not add modulr.js to the output. Use if you are using a different package loader, like Yabble.') do |custom_loader|
    options[:custom_loader] = true
  end
  
  opts.on('--dependency-graph[=OUTPUT]', 'Create a dependency graph of the module.') do |output|
    options[:dependency_graph] = true
    options[:output] = output
  end
  
  opts.on('-h', '--help', 'Show this message.') do
    puts opts
    exit
  end
end

opts.parse!

output = options.delete(:output)

begin
  if ARGV.size != 1
    puts opts
    exit 1
  end
  if options.delete(:dependency_graph)
    result = Modulr.graph(ARGV.first, options)
  else
    args = opts.default_argv.dup
    args << options
    result = Modulr.ize(*args)
    output.print(result)
  end
ensure
  output.close if output.respond_to?(:close)
end
